{"version":3,"file":"index.js","sources":["../src/webdav-cli.constants.ts","../src/create-http-auth.ts","../src/createbasicauth.ts","../src/createdigestauth.ts","../src/webdav-cli.utils.ts","../src/webdav-cli.server.ts","../src/createhttpauthmiddle.ts","../src/beforelogger.ts","../src/propfindchecker.ts","../src/koa-static-server.ts","../src/afterlogger.ts"],"sourcesContent":["import { WebdavCliRights } from \"./webdav-cli.interfaces\";\n\n// export const HOMEPAGE = 'https://github.com/svtslv/webdav-cli';\n\nexport const RIGHTS: WebdavCliRights = [\n    \"all\",\n    \"canCreate\",\n    \"canDelete\",\n    \"canMove\",\n    \"canRename\",\n    \"canAppend\",\n    \"canWrite\",\n    \"canRead\",\n    \"canSource\",\n    \"canGetMimeType\",\n    \"canGetSize\",\n    \"canListLocks\",\n    \"canSetLock\",\n    \"canRemoveLock\",\n    \"canGetAvailableLocks\",\n    \"canGetLock\",\n    \"canAddChild\",\n    \"canRemoveChild\",\n    \"canGetChildren\",\n    \"canSetProperty\",\n    \"canGetProperty\",\n    \"canGetProperties\",\n    \"canRemoveProperty\",\n    \"canGetCreationDate\",\n    \"canGetLastModifiedDate\",\n    \"canGetWebName\",\n    \"canGetType\",\n];\n","import { v2 as webdav } from \"webdav-server\";\n//@ts-ignore\nimport { createbasicauth } from \"./createbasicauth.js\";\nimport { createdigestauth } from \"./createdigestauth.js\";\n\nexport function createhttpauth(options: {\n    user: string;\n    pass: string;\n    authentication: \"HTTPDigestAuthentication\" | \"HTTPBasicAuthentication\";\n}) {\n    const realm = \"Default realm\";\n    const auth =\n        options.authentication === \"HTTPBasicAuthentication\"\n            ? createbasicauth(realm, options.user, options.pass)\n            : createdigestauth(realm, options.user, options.pass);\n    return (ctx: webdav.HTTPRequestContext, next: () => void) => {\n        auth.check((req, res) => {\n            next();\n        })(ctx.request, ctx.response);\n    };\n}\n","import httpauth from \"http-auth\";\n\nexport function createbasicauth(\n    realm: string,\n    user: string,\n    pass: string,\n): ReturnType<typeof httpauth.basic> {\n    return httpauth.basic(\n        {\n            realm,\n        },\n        (username, password, callback) => {\n            // Custom authentication method.\n            callback(username === user && password === pass);\n        },\n    );\n}\n","import httpauth from \"http-auth\";\n//@ts-ignore\nimport utils from \"http-auth/src/auth/utils.js\";\n\nexport function createdigestauth(\n    realm: string,\n    user: string,\n    pass: string,\n): ReturnType<typeof httpauth.digest> {\n    return httpauth.digest(\n        {\n            realm,\n        },\n        // Expecting md5(username:realm:password) in callback.\n        (username, callback) => {\n            if (username === user) {\n                callback(utils.md5(`${username}:${realm}:${pass}`));\n            } else {\n                callback();\n            }\n        },\n    );\n}\n","export function getRandomString(length: number) {\n    return [...Array(Math.ceil(length / 8))]\n        .map(() => Math.random().toString(36).slice(-8))\n        .join(\"\")\n        .slice(-length);\n}\n","import fs from \"fs\";\nimport http from \"http\";\nimport https from \"https\";\nimport { dirname, join } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { v2 as webdav } from \"webdav-server\";\nimport { afterlogger } from \"./afterlogger.js\";\nimport { beforelogger } from \"./beforelogger.js\";\nimport { createhttpauthmiddle } from \"./createhttpauthmiddle.js\";\nimport { koa_static_server } from \"./koa-static-server.js\";\nimport { propfindchecker } from \"./propfindchecker.js\";\nimport { RIGHTS } from \"./webdav-cli.constants.js\";\nimport { WebdavCliConfig, WebdavCliRights } from \"./webdav-cli.interfaces.js\";\nimport { getRandomString } from \"./webdav-cli.utils.js\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nexport class WebdavCli {\n    config: WebdavCliConfig;\n    server: webdav.WebDAVServer;\n    auth_middle: (ctx: webdav.HTTPRequestContext, next: () => void) => void;\n    constructor(config: Partial<WebdavCliConfig>) {\n        this.config = this.getConfig(config);\n        const authentication = this.get_authentication(this.config);\n        const auth_middle = createhttpauthmiddle(\n            this.config.username,\n            this.config.password,\n            authentication,\n        );\n        this.auth_middle = auth_middle;\n        this.server = this.init();\n    }\n\n    getConfig(config: Partial<WebdavCliConfig>): WebdavCliConfig {\n        const selfSignedKey = join(__dirname, \"/../certs/self-signed.key.pem\");\n        const selfSignedCert = join(\n            __dirname,\n            \"/../certs/self-signed.cert.pem\",\n        );\n\n        const path = config.path || process.cwd();\n        const host = config.host || \"0.0.0.0\";\n        const port = config.port || 1900;\n\n        const digest = Boolean(config.digest);\n        let username = (config.username || getRandomString(16)).toString();\n        let password = (config.password || getRandomString(16)).toString();\n\n        const ssl = Boolean(config.ssl);\n        const sslKey = ssl\n            ? fs.readFileSync(config.sslKey || selfSignedKey).toString()\n            : \"\";\n        const sslCert = ssl\n            ? fs.readFileSync(config.sslCert || selfSignedCert).toString()\n            : \"\";\n\n        const disableAuthentication = Boolean(config.disableAuthentication);\n\n        if (disableAuthentication) {\n            config.rights = config.rights || [\"canRead\"];\n            username = \"\";\n            password = \"\";\n        }\n\n        const rights = (config.rights || [\"all\"]).filter(\n            (item: WebdavCliRights[number]) => RIGHTS.includes(item),\n        );\n        const url = `${ssl ? \"https\" : \"http\"}://${host}:${port}`;\n\n        return {\n            ...config,\n            host,\n            path,\n            port,\n            username,\n            digest,\n            password,\n            ssl,\n            sslCert,\n            sslKey,\n            rights,\n            url,\n            disableAuthentication,\n        };\n    }\n\n    init(): webdav.WebDAVServer {\n        const config = this.config;\n\n        const userManager = new webdav.SimpleUserManager();\n        const user = userManager.addUser(\n            config.username,\n            config.password,\n            false,\n        );\n\n        const privilegeManager = new webdav.SimplePathPrivilegeManager();\n        privilegeManager.setRights(user, \"/\", config.rights);\n\n        const options = {\n            httpAuthentication:\n                // config.disableAuthentication\n                // ?\n                {\n                    askForAuthentication: () => ({}),\n                    getUser: (\n                        ctx: any,\n                        gotUserCallback: (\n                            arg0: Error,\n                            arg1: webdav.IUser,\n                        ) => void,\n                    ) => {\n                        userManager.getDefaultUser((defaultUser) => {\n                            privilegeManager.setRights(\n                                defaultUser,\n                                \"/\",\n                                config.rights,\n                            );\n                            //@ts-ignore\n                            gotUserCallback(null, defaultUser);\n                        });\n                    },\n                },\n            //     :\n            //     new webdav[authentication](userManager, \"Default realm\"),\n            // privilegeManager: privilegeManager,\n            // https: config.ssl\n            //     ? { cert: config.sslCert, key: config.sslKey }\n            //     : undefined,\n            port: config.port,\n            hostname: config.host,\n        };\n        config.ssl &&\n            Reflect.set(options, \"https\", {\n                cert: config.sslCert,\n                key: config.sslKey,\n            });\n        const server = new webdav.WebDAVServer(options);\n\n        server.beforeRequest(beforelogger());\n        if (!config.disableAuthentication) {\n            const auth_middle = this.auth_middle;\n            if (\n                Array.isArray(this.config.methodsWithoutAuthentication) &&\n                this.config.methodsWithoutAuthentication.length\n            ) {\n                server.beforeRequest((ctx, next) => {\n                    if (\n                        ctx.request.method &&\n                        this.config.methodsWithoutAuthentication?.includes(\n                            ctx.request.method,\n                        )\n                    ) {\n                        next();\n                    } else {\n                        auth_middle(ctx, next);\n                    }\n                });\n            } else {\n                server.beforeRequest(auth_middle);\n            }\n        }\n        server.beforeRequest(propfindchecker());\n        server.beforeRequest(koa_static_server(config.path));\n        server.afterRequest(afterlogger());\n\n        return server;\n    }\n    get_authentication(config: WebdavCliConfig) {\n        return config.digest\n            ? \"HTTPDigestAuthentication\"\n            : \"HTTPBasicAuthentication\";\n    }\n\n    async start() {\n        const config = this.config;\n        const { server } = this;\n        console.log(\n            Object.fromEntries(\n                Object.entries(config).filter(([key]) => {\n                    return ![\"sslKey\", \"sslCert\"].includes(key);\n                }),\n            ),\n        );\n        await server.setFileSystemAsync(\n            \"/\",\n            new webdav.PhysicalFileSystem(config.path),\n        );\n        const logs = [\n            `Server running at ${config.url}`,\n\n            \"Hit CTRL-C to stop the server\",\n            \"Run with --help to print help\",\n        ];\n\n        console.log(logs.join(\"\\n\"));\n        let rawhttpserver: http.Server | https.Server | undefined = undefined;\n\n        Object.defineProperty(server, \"server\", {\n            get() {\n                return rawhttpserver;\n            },\n            set(v) {\n                rawhttpserver = v;\n                if (!rawhttpserver) {\n                    return;\n                }\n                rawhttpserver.on(\"error\", (err) => {\n                    if (Reflect.get(err, \"code\") === \"EADDRINUSE\") {\n                        console.error(err);\n                        rawhttpserver?.listen(\n                            Math.round(Math.random() * 65535),\n                            config.host,\n                        );\n                        return;\n                    } else {\n                        throw err;\n                    }\n                });\n                rawhttpserver.on(\"listening\", () => {\n                    console.log(\n                        `Server listening on ` +\n                            JSON.stringify(rawhttpserver?.address()),\n                    );\n                });\n\n                return;\n            },\n            enumerable: true,\n            configurable: true,\n        });\n\n        await server.startAsync(config.port);\n    }\n}\nexport type HTTPRequestContext = webdav.HTTPRequestContext;\n","import { HTTPRequestContext } from \"./index\";\nimport { createhttpauth } from \"./create-http-auth.js\";\n\nexport function createhttpauthmiddle(\n    username: string,\n    password: string,\n    authentication: \"HTTPDigestAuthentication\" | \"HTTPBasicAuthentication\",\n): (ctx: HTTPRequestContext, next: () => void) => void {\n    return createhttpauth({\n        user: username,\n        pass: password,\n        authentication,\n    });\n}\n","import { HTTPRequestContext } from \"./webdav-cli.server.js\";\n\nexport function beforelogger() {\n    return async (ctx: HTTPRequestContext, next: () => void) => {\n        const { url, headers, method } = ctx.request;\n        console.log(\">> \", method, url, headers);\n        next();\n    };\n}\n","import { HTTPRequestContext } from \"./webdav-cli.server.js\";\n\nexport function propfindchecker() {\n    return (arg: HTTPRequestContext, next: () => void) => {\n        const { headers, method } = arg.request;\n        const { depth } = headers;\n        if (method === \"PROPFIND\" && depth !== \"0\" && depth !== \"1\") {\n            arg.setCode(403);\n            arg.exit();\n        } else {\n            next();\n        }\n    };\n}\n","//@ts-ignore\nimport Koa from \"koa\";\nimport logger from \"koa-logger\";\nimport { v2 as webdav } from \"webdav-server\";\n//@ts-ignore\nimport { loadcoremiddles } from \"@masx200/serve-cli\";\nexport function koa_static_server(publicpath: string) {\n    const app = new Koa();\n    // app.use(async (ctx, next) => {\n    //     ctx.response.set(\"Access-Control-Allow-Origin\", \"*\");\n    //     return next();\n    // });\n\n    // app.use(async (ctx, next) => {\n    //     await next();\n    //     if (ctx.method === \"HEAD\") {\n    //         ctx.res.end();\n    //     }\n    //     return;\n    // });\n    // app.use(range);\n    // app.use(cors({}));\n    app.use(logger());\n    // app.use(conditional());\n\n    // app.use(compress({}));\n    // app.use(streametag({}));\n    // app.use(koaetag({}));\n    // app.use(serveIndex(publicpath, { hidden: true }));\n    // app.use(servestatic(publicpath, { hidden: true }));\n    loadcoremiddles(app, publicpath, false);\n    const serverHandler = app.callback();\n    return function middleware(\n        ctx: webdav.HTTPRequestContext,\n        next: () => void,\n    ) {\n        const { request, response } = ctx;\n        const [req, res] = [request, response];\n        if (\n            ctx.request.method &&\n            ![\"GET\", \"HEAD\"].includes(ctx.request.method)\n        ) {\n            return next();\n        }\n        serverHandler(req, res);\n\n        return;\n    };\n}\n","import { HTTPRequestContext } from \"./webdav-cli.server.js\";\n\nexport function afterlogger() {\n    return (arg: HTTPRequestContext, next: () => void) => {\n        const log = `>> ${arg.request.method} ${arg.requested.uri} > ${arg.response.statusCode} `;\n        // server.emit('log', null, null, '/', log);\n        console.log(log);\n        next();\n    };\n}\n"],"names":["RIGHTS","createhttpauth","options","realm","auth","authentication","user","pass","httpauth","basic","username","password","callback","createbasicauth","digest","utils","md5","createdigestauth","ctx","next","check","req","res","request","response","getRandomString","length","Array","Math","ceil","map","random","toString","slice","join","__dirname","dirname","fileURLToPath","import","meta","url","WebdavCli","config","server","auth_middle","constructor","this","getConfig","get_authentication","createhttpauthmiddle","init","selfSignedKey","selfSignedCert","path","process","cwd","host","port","Boolean","ssl","sslKey","fs","readFileSync","sslCert","disableAuthentication","rights","filter","item","includes","userManager","webdav","SimpleUserManager","addUser","privilegeManager","SimplePathPrivilegeManager","setRights","httpAuthentication","askForAuthentication","getUser","gotUserCallback","getDefaultUser","defaultUser","hostname","Reflect","set","cert","key","WebDAVServer","beforeRequest","async","headers","method","console","log","isArray","methodsWithoutAuthentication","arg","depth","setCode","exit","publicpath","app","Koa","use","logger","loadcoremiddles","serverHandler","koa_static_server","afterRequest","requested","uri","statusCode","Object","fromEntries","entries","setFileSystemAsync","PhysicalFileSystem","logs","rawhttpserver","defineProperty","get","v","on","err","error","listen","round","JSON","stringify","address","enumerable","configurable","startAsync"],"mappings":"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"}