{"version":3,"file":"webdav-cli.cli.js","sources":["../node_modules/.pnpm/http-auth@4.1.5/node_modules/http-auth/src/auth/utils.js","../src/create-http-auth.ts","../src/createbasicauth.ts","../src/createdigestauth.ts","../src/webdav-cli.constants.ts","../src/webdav-cli.utils.ts","../src/webdav-cli.server.ts","../src/beforelogger.ts","../src/createhttpauthmiddle.ts","../src/propfindchecker.ts","../src/koa-static-server.ts","../src/afterlogger.ts","../src/webdav-cli.cli.ts","../src/showhelp.ts"],"sourcesContent":["\"use strict\";\n\n// Importing crypto module.\nconst crypto = require(\"crypto\");\nconst utils = {};\n\n// Generates md5 hash of input.\nutils.md5 = input => {\n  let hash = crypto.createHash(\"MD5\");\n  hash.update(input);\n\n  return hash.digest(\"hex\");\n};\n\n// Generates sha1 hash of input.\nutils.sha1 = input => {\n  let hash = crypto.createHash(\"sha1\");\n  hash.update(input);\n\n  return hash.digest(\"base64\");\n};\n\n// Encode to base64 string.\nutils.base64 = input => {\n  return Buffer.from(input, \"utf8\").toString(\"base64\");\n};\n\n// Decodes base64 string.\nutils.decodeBase64 = input => {\n  return Buffer.from(input, \"base64\").toString(\"utf8\");\n};\n\n// Export utils.\nmodule.exports = utils;\n","import { v2 as webdav } from \"webdav-server\";\n//@ts-ignore\nimport { createbasicauth } from \"./createbasicauth.js\";\nimport { createdigestauth } from \"./createdigestauth.js\";\n\nexport function createhttpauth(options: {\n    user: string;\n    pass: string;\n    authentication: \"HTTPDigestAuthentication\" | \"HTTPBasicAuthentication\";\n}) {\n    const realm = \"Default realm\";\n    const auth =\n        options.authentication === \"HTTPBasicAuthentication\"\n            ? createbasicauth(realm, options.user, options.pass)\n            : createdigestauth(realm, options.user, options.pass);\n    return (ctx: webdav.HTTPRequestContext, next: () => void) => {\n        auth.check((req, res) => {\n            next();\n        })(ctx.request, ctx.response);\n    };\n}\n","import httpauth from \"http-auth\";\n\nexport function createbasicauth(\n    realm: string,\n    user: string,\n    pass: string,\n): ReturnType<typeof httpauth.basic> {\n    return httpauth.basic(\n        {\n            realm,\n        },\n        (username, password, callback) => {\n            // Custom authentication method.\n            callback(username === user && password === pass);\n        },\n    );\n}\n","import httpauth from \"http-auth\";\n//@ts-ignore\nimport utils from \"http-auth/src/auth/utils.js\";\n\nexport function createdigestauth(\n    realm: string,\n    user: string,\n    pass: string,\n): ReturnType<typeof httpauth.digest> {\n    return httpauth.digest(\n        {\n            realm,\n        },\n        // Expecting md5(username:realm:password) in callback.\n        (username, callback) => {\n            if (username === user) {\n                callback(utils.md5(`${username}:${realm}:${pass}`));\n            } else {\n                callback();\n            }\n        },\n    );\n}\n","import { WebdavCliRights } from \"./webdav-cli.interfaces\";\n\n// export const HOMEPAGE = 'https://github.com/svtslv/webdav-cli';\n\nexport const RIGHTS: WebdavCliRights = [\n    \"all\",\n    \"canCreate\",\n    \"canDelete\",\n    \"canMove\",\n    \"canRename\",\n    \"canAppend\",\n    \"canWrite\",\n    \"canRead\",\n    \"canSource\",\n    \"canGetMimeType\",\n    \"canGetSize\",\n    \"canListLocks\",\n    \"canSetLock\",\n    \"canRemoveLock\",\n    \"canGetAvailableLocks\",\n    \"canGetLock\",\n    \"canAddChild\",\n    \"canRemoveChild\",\n    \"canGetChildren\",\n    \"canSetProperty\",\n    \"canGetProperty\",\n    \"canGetProperties\",\n    \"canRemoveProperty\",\n    \"canGetCreationDate\",\n    \"canGetLastModifiedDate\",\n    \"canGetWebName\",\n    \"canGetType\",\n];\n","export function getRandomString(length: number) {\n    return [...Array(Math.ceil(length / 8))]\n        .map(() => Math.random().toString(36).slice(-8))\n        .join(\"\")\n        .slice(-length);\n}\n","import fs from \"fs\";\nimport http from \"http\";\nimport https from \"https\";\nimport { dirname, join } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { v2 as webdav } from \"webdav-server\";\nimport { afterlogger } from \"./afterlogger.js\";\nimport { beforelogger } from \"./beforelogger.js\";\nimport { createhttpauthmiddle } from \"./createhttpauthmiddle.js\";\nimport { koa_static_server } from \"./koa-static-server.js\";\nimport { propfindchecker } from \"./propfindchecker.js\";\nimport { RIGHTS } from \"./webdav-cli.constants.js\";\nimport { WebdavCliConfig, WebdavCliRights } from \"./webdav-cli.interfaces.js\";\nimport { getRandomString } from \"./webdav-cli.utils.js\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nexport class WebdavCli {\n    config: WebdavCliConfig;\n    server: webdav.WebDAVServer;\n    constructor(config: Partial<WebdavCliConfig>) {\n        this.config = this.getConfig(config);\n        this.server = this.init();\n    }\n\n    getConfig(config: Partial<WebdavCliConfig>): WebdavCliConfig {\n        const selfSignedKey = join(__dirname, \"/../certs/self-signed.key.pem\");\n        const selfSignedCert = join(\n            __dirname,\n            \"/../certs/self-signed.cert.pem\",\n        );\n\n        const path = config.path || process.cwd();\n        const host = config.host || \"0.0.0.0\";\n        const port = config.port || 1900;\n\n        const digest = Boolean(config.digest);\n        let username = (config.username || getRandomString(16)).toString();\n        let password = (config.password || getRandomString(16)).toString();\n\n        const ssl = Boolean(config.ssl);\n        const sslKey = ssl\n            ? fs.readFileSync(config.sslKey || selfSignedKey).toString()\n            : \"\";\n        const sslCert = ssl\n            ? fs.readFileSync(config.sslCert || selfSignedCert).toString()\n            : \"\";\n\n        const disableAuthentication = Boolean(config.disableAuthentication);\n\n        if (disableAuthentication) {\n            config.rights = config.rights || [\"canRead\"];\n            username = \"\";\n            password = \"\";\n        }\n\n        const rights = (config.rights || [\"all\"]).filter(\n            (item: WebdavCliRights[number]) => RIGHTS.includes(item),\n        );\n        const url = `${ssl ? \"https\" : \"http\"}://${host}:${port}`;\n\n        return {\n            host,\n            path,\n            port,\n            username,\n            digest,\n            password,\n            ssl,\n            sslCert,\n            sslKey,\n            rights,\n            url,\n            disableAuthentication,\n        };\n    }\n\n    init(): webdav.WebDAVServer {\n        const config = this.config;\n\n        const userManager = new webdav.SimpleUserManager();\n        const user = userManager.addUser(\n            config.username,\n            config.password,\n            false,\n        );\n\n        const privilegeManager = new webdav.SimplePathPrivilegeManager();\n        privilegeManager.setRights(user, \"/\", config.rights);\n\n        const authentication = config.digest\n            ? \"HTTPDigestAuthentication\"\n            : \"HTTPBasicAuthentication\";\n        const options = {\n            httpAuthentication:\n                // config.disableAuthentication\n                // ?\n                {\n                    askForAuthentication: () => ({}),\n                    getUser: (\n                        ctx: any,\n                        gotUserCallback: (\n                            arg0: Error,\n                            arg1: webdav.IUser,\n                        ) => void,\n                    ) => {\n                        userManager.getDefaultUser((defaultUser) => {\n                            privilegeManager.setRights(\n                                defaultUser,\n                                \"/\",\n                                config.rights,\n                            );\n                            //@ts-ignore\n                            gotUserCallback(null, defaultUser);\n                        });\n                    },\n                },\n            //     :\n            //     new webdav[authentication](userManager, \"Default realm\"),\n            // privilegeManager: privilegeManager,\n            // https: config.ssl\n            //     ? { cert: config.sslCert, key: config.sslKey }\n            //     : undefined,\n            port: config.port,\n            hostname: config.host,\n        };\n        config.ssl &&\n            Reflect.set(options, \"https\", {\n                cert: config.sslCert,\n                key: config.sslKey,\n            });\n        const server = new webdav.WebDAVServer(options);\n\n        server.beforeRequest(beforelogger());\n        if (!config.disableAuthentication) {\n            server.beforeRequest(\n                createhttpauthmiddle(\n                    config.username,\n                    config.password,\n                    authentication,\n                ),\n            );\n        }\n        server.beforeRequest(propfindchecker());\n        server.beforeRequest(koa_static_server(config.path));\n        server.afterRequest(afterlogger());\n\n        return server;\n    }\n    async start() {\n        const config = this.config;\n        const { server } = this;\n        console.log(\n            Object.fromEntries(\n                Object.entries(config).filter(([key]) => {\n                    return ![\"sslKey\", \"sslCert\"].includes(key);\n                }),\n            ),\n        );\n        await server.setFileSystemAsync(\n            \"/\",\n            new webdav.PhysicalFileSystem(config.path),\n        );\n        const logs = [\n            `Server running at ${config.url}`,\n\n            \"Hit CTRL-C to stop the server\",\n            \"Run with --help to print help\",\n        ];\n\n        console.log(logs.join(\"\\n\"));\n        let rawhttpserver: http.Server | https.Server | undefined = undefined;\n\n        Object.defineProperty(server, \"server\", {\n            get() {\n                return rawhttpserver;\n            },\n            set(v) {\n                rawhttpserver = v;\n                if (!rawhttpserver) {\n                    return;\n                }\n                rawhttpserver.on(\"error\", (err) => {\n                    if (err.code === \"EADDRINUSE\") {\n                        console.error(err);\n                        rawhttpserver?.listen(\n                            Math.round(Math.random() * 65535),\n                        );\n                        return;\n                    } else {\n                        throw err;\n                    }\n                });\n                rawhttpserver.on(\"listening\", () => {\n                    console.log(\n                        `Server listening on ` +\n                            JSON.stringify(rawhttpserver?.address()),\n                    );\n                });\n\n                return;\n            },\n            enumerable: true,\n            configurable: true,\n        });\n\n        await server.startAsync(config.port);\n    }\n}\nexport type HTTPRequestContext = webdav.HTTPRequestContext;\n","import { HTTPRequestContext } from \"./webdav-cli.server.js\";\n\nexport function beforelogger() {\n    return async (ctx: HTTPRequestContext, next: () => void) => {\n        const { url, headers, method } = ctx.request;\n        console.log(\">> \", method, url, headers);\n        next();\n    };\n}\n","import { HTTPRequestContext } from \"./index\";\nimport { createhttpauth } from \"./create-http-auth.js\";\n\nexport function createhttpauthmiddle(\n    username: string,\n    password: string,\n    authentication: \"HTTPDigestAuthentication\" | \"HTTPBasicAuthentication\",\n): (ctx: HTTPRequestContext, next: () => void) => void {\n    return createhttpauth({\n        user: username,\n        pass: password,\n        authentication,\n    });\n}\n","import { HTTPRequestContext } from \"./webdav-cli.server.js\";\n\nexport function propfindchecker() {\n    return (arg: HTTPRequestContext, next: () => void) => {\n        const { headers, method } = arg.request;\n        const { depth } = headers;\n        if (method === \"PROPFIND\" && depth !== \"0\" && depth !== \"1\") {\n            arg.setCode(403);\n            arg.exit();\n        } else {\n            next();\n        }\n    };\n}\n","//@ts-ignore\nimport Koa from \"koa\";\nimport logger from \"koa-logger\";\nimport { v2 as webdav } from \"webdav-server\";\n//@ts-ignore\nimport { loadcoremiddles } from \"@masx200/serve-cli\";\nexport function koa_static_server(publicpath: string) {\n    const app = new Koa();\n    // app.use(async (ctx, next) => {\n    //     ctx.response.set(\"Access-Control-Allow-Origin\", \"*\");\n    //     return next();\n    // });\n\n    // app.use(async (ctx, next) => {\n    //     await next();\n    //     if (ctx.method === \"HEAD\") {\n    //         ctx.res.end();\n    //     }\n    //     return;\n    // });\n    // app.use(range);\n    // app.use(cors({}));\n    app.use(logger());\n    // app.use(conditional());\n\n    // app.use(compress({}));\n    // app.use(streametag({}));\n    // app.use(koaetag({}));\n    // app.use(serveIndex(publicpath, { hidden: true }));\n    // app.use(servestatic(publicpath, { hidden: true }));\n    loadcoremiddles(app, publicpath, false);\n    const serverHandler = app.callback();\n    return function middleware(\n        ctx: webdav.HTTPRequestContext,\n        next: () => void,\n    ) {\n        const { request, response } = ctx;\n        const [req, res] = [request, response];\n        if (\n            ctx.request.method &&\n            ![\"GET\", \"HEAD\"].includes(ctx.request.method)\n        ) {\n            return next();\n        }\n        serverHandler(req, res);\n\n        return;\n    };\n}\n","import { HTTPRequestContext } from \"./webdav-cli.server.js\";\n\nexport function afterlogger() {\n    return (arg: HTTPRequestContext, next: () => void) => {\n        const log = `>> ${arg.request.method} ${arg.requested.uri} > ${arg.response.statusCode} `;\n        // server.emit('log', null, null, '/', log);\n        console.log(log);\n        next();\n    };\n}\n","// #!/usr/bin/env node\nimport process from \"process\";\nimport minimist from \"minimist\";\nimport { WebdavCli } from \"./webdav-cli.server.js\";\nimport { showhelp } from \"./showhelp.js\";\nconst argv = minimist(process.argv.slice(2));\nconsole.log(\"webdav-cli\", \"\\n\");\nif (argv.help || argv.h) {\n    showhelp();\n}\n// if (argv.version || argv.v) {\n//     console.log(\"Version: \" + require(\"../package.json\").version, \"\\n\");\n//     process.exit();\n// }\nconst rights = argv.rights || argv.r;\nconst argvRights =\n    rights && typeof rights === \"string\" ? rights.split(\",\") : undefined;\nconst envRights = process.env.WEBDAV_CLI_RIGHTS\n    ? process.env.WEBDAV_CLI_RIGHTS.split(\",\")\n    : undefined;\nconst config = {\n    path: argv.path || process.env.WEBDAV_CLI_PATH || argv.pa,\n    host: argv.host || process.env.WEBDAV_CLI_HOST || argv.ho,\n    port:\n        Number(argv.port || argv.po) ||\n        parseInt(String(process.env.WEBDAV_CLI_PORT)),\n    digest: argv.digest || argv.dg || Boolean(process.env.WEBDAV_CLI_DIGEST),\n    username: argv.username || process.env.WEBDAV_CLI_USERNAME || argv.u,\n    password: argv.password || process.env.WEBDAV_CLI_PASSWORD || argv.ps,\n    ssl: argv.ssl || argv.s || Boolean(process.env.WEBDAV_CLI_SSL),\n    sslKey: argv.sslKey || process.env.WEBDAV_CLI_SSL_KEY,\n    sslCert: argv.sslCert || process.env.WEBDAV_CLI_SSL_CERT,\n    disableAuthentication:\n        argv.disableAuthentication ||\n        process.env.WEBDAV_CLI_DISABLE_AUTHENTICATION ||\n        argv.da,\n    rights: argvRights || envRights,\n};\nconst run = async () => {\n    //@ts-ignore\n    const webdavCli = new WebdavCli(config);\n    await webdavCli.start();\n};\nrun();\nprocess.on(\"unhandledRejection\", (e) => {\n    console.error(e);\n});\n","import process from \"process\";\nexport function showhelp() {\n    console.log(\n        [\n            \"usage: webdav-cli [options]\",\n            \"\",\n            \"options:\",\n            \"  --path,-pa        Path to folder [process.cwd()]\",\n            \"  --host,-ho         Host to use [0.0.0.0]\",\n            \"  --port,-po       Port to use [1900]\",\n            \"  --digest,-dg     Enable digest authentication [basic]\",\n            \"  --username,-u   Username for basic/digest authentication [random]\",\n            \"  --password,-ps   Password for basic/digest authentication [random]\",\n            \"  --disableAuthentication,-da  The server file becomes read-only without Authentication.[false]\",\n            \"  --ssl,-s        Enable https [false]\",\n            \"  --sslKey     Path to ssl key file [self-signed]\",\n            \"  --sslCert    Path to ssl cert file [self-signed]\",\n            \"  --help,-h       Print this list and exit\",\n            // \"  --version,-v     Print the version and exit.\",\n            \"  --rights,-r     Comma separated values without spaces [all]\",\n            `\n    'all', 'canCreate', 'canDelete', 'canMove', 'canRename', \n    'canAppend', 'canWrite', 'canRead', 'canSource', \n    'canGetMimeType', 'canGetSize', 'canListLocks', \n    'canSetLock', 'canRemoveLock', 'canGetAvailableLocks', \n    'canGetLock', 'canAddChild', 'canRemoveChild', \n    'canGetChildren', 'canSetProperty', 'canGetProperty', \n    'canGetProperties', 'canRemoveProperty', 'canGetCreationDate', \n    'canGetLastModifiedDate', 'canGetWebName', 'canGetType'`,\n            \"\",\n            \"env:\",\n            \"  WEBDAV_CLI_PATH, WEBDAV_CLI_HOST, WEBDAV_CLI_PORT,\",\n            \"  WEBDAV_CLI_USERNAME, WEBDAV_CLI_PASSWORD, WEBDAV_CLI_DIGEST,\",\n            \"  WEBDAV_CLI_SSL, WEBDAV_CLI_SSL_KEY, WEBDAV_CLI_SSL_CERT,\",\n            \"  WEBDAV_CLI_AUTO_INDEX, WEBDAV_CLI_RIGHTS\",\n            \"  WEBDAV_CLI_DISABLE_AUTHENTICATION\",\n            \"\",\n        ].join(\"\\n\"),\n    );\n    process.exit();\n}\n"],"names":["crypto","require$$0","utils","md5","input","hash","createHash","update","digest","sha1","base64","Buffer","from","toString","decodeBase64","utils_1","createhttpauth","options","realm","auth","authentication","user","pass","httpauth","basic","username","password","callback","createbasicauth","createdigestauth","ctx","next","check","req","res","request","response","RIGHTS","getRandomString","length","Array","Math","ceil","map","random","slice","join","__dirname","dirname","fileURLToPath","import","meta","url","WebdavCli","config","server","constructor","this","getConfig","init","selfSignedKey","selfSignedCert","path","process","cwd","host","port","Boolean","ssl","sslKey","fs","readFileSync","sslCert","disableAuthentication","rights","filter","item","includes","userManager","webdav","SimpleUserManager","addUser","privilegeManager","SimplePathPrivilegeManager","setRights","httpAuthentication","askForAuthentication","getUser","gotUserCallback","getDefaultUser","defaultUser","hostname","Reflect","set","cert","key","WebDAVServer","beforeRequest","async","headers","method","console","log","createhttpauthmiddle","arg","depth","setCode","exit","publicpath","app","Koa","use","logger","loadcoremiddles","serverHandler","koa_static_server","afterRequest","requested","uri","statusCode","start","Object","fromEntries","entries","setFileSystemAsync","PhysicalFileSystem","logs","rawhttpserver","defineProperty","get","v","on","err","code","error","listen","round","JSON","stringify","address","enumerable","configurable","startAsync","argv","minimist","help","h","r","argvRights","split","undefined","envRights","env","WEBDAV_CLI_RIGHTS","WEBDAV_CLI_PATH","pa","WEBDAV_CLI_HOST","ho","Number","po","parseInt","String","WEBDAV_CLI_PORT","dg","WEBDAV_CLI_DIGEST","WEBDAV_CLI_USERNAME","u","WEBDAV_CLI_PASSWORD","ps","s","WEBDAV_CLI_SSL","WEBDAV_CLI_SSL_KEY","WEBDAV_CLI_SSL_CERT","WEBDAV_CLI_DISABLE_AUTHENTICATION","da","webdavCli","run","e"],"mappings":"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"}