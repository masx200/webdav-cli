{"version":3,"file":"webdav-cli.cli.js","sources":["../src/create-http-auth.ts","../src/createbasicauth.ts","../src/createdigestauth.ts","../src/webdav-cli.constants.ts","../src/webdav-cli.utils.ts","../src/webdav-cli.server.ts","../src/createhttpauthmiddle.ts","../src/beforelogger.ts","../src/propfindchecker.ts","../src/koa-static-server.ts","../src/afterlogger.ts","../src/main.ts","../src/showhelp.ts","../src/webdav-cli.cli.ts"],"sourcesContent":["import { v2 as webdav } from \"webdav-server\";\n//@ts-ignore\nimport { createbasicauth } from \"./createbasicauth.js\";\nimport { createdigestauth } from \"./createdigestauth.js\";\n\nexport function createhttpauth(options: {\n    user: string;\n    pass: string;\n    authentication: \"HTTPDigestAuthentication\" | \"HTTPBasicAuthentication\";\n}) {\n    const realm = \"Default realm\";\n    const auth =\n        options.authentication === \"HTTPBasicAuthentication\"\n            ? createbasicauth(realm, options.user, options.pass)\n            : createdigestauth(realm, options.user, options.pass);\n    return (ctx: webdav.HTTPRequestContext, next: () => void) => {\n        auth.check((req, res) => {\n            next();\n        })(ctx.request, ctx.response);\n    };\n}\n","import httpauth from \"http-auth\";\n\nexport function createbasicauth(\n    realm: string,\n    user: string,\n    pass: string,\n): ReturnType<typeof httpauth.basic> {\n    return httpauth.basic(\n        {\n            realm,\n        },\n        (username, password, callback) => {\n            // Custom authentication method.\n            callback(username === user && password === pass);\n        },\n    );\n}\n","import httpauth from \"http-auth\";\n//@ts-ignore\nimport utils from \"http-auth/src/auth/utils.js\";\n\nexport function createdigestauth(\n    realm: string,\n    user: string,\n    pass: string,\n): ReturnType<typeof httpauth.digest> {\n    return httpauth.digest(\n        {\n            realm,\n        },\n        // Expecting md5(username:realm:password) in callback.\n        (username, callback) => {\n            if (username === user) {\n                callback(utils.md5(`${username}:${realm}:${pass}`));\n            } else {\n                callback();\n            }\n        },\n    );\n}\n","import { WebdavCliRights } from \"./webdav-cli.interfaces\";\n\n// export const HOMEPAGE = 'https://github.com/svtslv/webdav-cli';\n\nexport const RIGHTS: WebdavCliRights = [\n    \"all\",\n    \"canCreate\",\n    \"canDelete\",\n    \"canMove\",\n    \"canRename\",\n    \"canAppend\",\n    \"canWrite\",\n    \"canRead\",\n    \"canSource\",\n    \"canGetMimeType\",\n    \"canGetSize\",\n    \"canListLocks\",\n    \"canSetLock\",\n    \"canRemoveLock\",\n    \"canGetAvailableLocks\",\n    \"canGetLock\",\n    \"canAddChild\",\n    \"canRemoveChild\",\n    \"canGetChildren\",\n    \"canSetProperty\",\n    \"canGetProperty\",\n    \"canGetProperties\",\n    \"canRemoveProperty\",\n    \"canGetCreationDate\",\n    \"canGetLastModifiedDate\",\n    \"canGetWebName\",\n    \"canGetType\",\n];\n","export function getRandomString(length: number) {\n    return [...Array(Math.ceil(length / 8))]\n        .map(() => Math.random().toString(36).slice(-8))\n        .join(\"\")\n        .slice(-length);\n}\n","import fs from \"fs\";\nimport http from \"http\";\nimport https from \"https\";\nimport { dirname, join } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { v2 as webdav } from \"webdav-server\";\nimport { afterlogger } from \"./afterlogger.js\";\nimport { beforelogger } from \"./beforelogger.js\";\nimport { createhttpauthmiddle } from \"./createhttpauthmiddle.js\";\nimport { koa_static_server } from \"./koa-static-server.js\";\nimport { propfindchecker } from \"./propfindchecker.js\";\nimport { RIGHTS } from \"./webdav-cli.constants.js\";\nimport { WebdavCliConfig, WebdavCliRights } from \"./webdav-cli.interfaces.js\";\nimport { getRandomString } from \"./webdav-cli.utils.js\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nexport class WebdavCli {\n    config: WebdavCliConfig;\n    server: webdav.WebDAVServer;\n    #auth_middle: (ctx: webdav.HTTPRequestContext, next: () => void) => void;\n    constructor(config: Partial<WebdavCliConfig>) {\n        this.config = this.#getConfig(config);\n        const authentication = this.#get_authentication(this.config);\n        const auth_middle = createhttpauthmiddle(\n            this.config.username,\n            this.config.password,\n            authentication,\n        );\n        this.#auth_middle = auth_middle;\n        this.server = this.#init();\n    }\n\n    #getConfig(config: Partial<WebdavCliConfig>): WebdavCliConfig {\n        const selfSignedKey = join(__dirname, \"/../certs/self-signed.key.pem\");\n        const selfSignedCert = join(\n            __dirname,\n            \"/../certs/self-signed.cert.pem\",\n        );\n\n        const path = config.path || process.cwd();\n        const host = config.host || \"0.0.0.0\";\n        const port = config.port || 1900;\n\n        const digest = Boolean(config.digest);\n        let username = (config.username || getRandomString(16)).toString();\n        let password = (config.password || getRandomString(16)).toString();\n\n        const ssl = Boolean(config.ssl);\n        const sslKey = ssl\n            ? fs.readFileSync(config.sslKey || selfSignedKey).toString()\n            : \"\";\n        const sslCert = ssl\n            ? fs.readFileSync(config.sslCert || selfSignedCert).toString()\n            : \"\";\n\n        const disableAuthentication = Boolean(config.disableAuthentication);\n\n        if (disableAuthentication) {\n            config.rights = config.rights || [\"canRead\"];\n            username = \"\";\n            password = \"\";\n        }\n\n        const rights = (config.rights || [\"all\"]).filter(\n            (item: WebdavCliRights[number]) => RIGHTS.includes(item),\n        );\n        const url = `${ssl ? \"https\" : \"http\"}://${host}:${port}`;\n\n        return {\n            ...config,\n            host,\n            path,\n            port,\n            username,\n            digest,\n            password,\n            ssl,\n            sslCert,\n            sslKey,\n            rights,\n            url,\n            disableAuthentication,\n        };\n    }\n\n    #init(): webdav.WebDAVServer {\n        const config = this.config;\n\n        const userManager = new webdav.SimpleUserManager();\n        const user = userManager.addUser(\n            config.username,\n            config.password,\n            false,\n        );\n\n        const privilegeManager = new webdav.SimplePathPrivilegeManager();\n        privilegeManager.setRights(user, \"/\", config.rights);\n\n        const options = {\n            requireAuthentification: false,\n            httpAuthentication:\n                // config.disableAuthentication\n                // ?\n                {\n                    askForAuthentication: () => ({}),\n                    getUser: (\n                        ctx: any,\n                        gotUserCallback: (\n                            arg0: Error,\n                            arg1: webdav.IUser,\n                        ) => void,\n                    ) => {\n                        userManager.getDefaultUser((defaultUser) => {\n                            privilegeManager.setRights(\n                                defaultUser,\n                                \"/\",\n                                config.rights,\n                            );\n                            //@ts-ignore\n                            gotUserCallback(null, defaultUser);\n                        });\n                    },\n                },\n            //     :\n            //     new webdav[authentication](userManager, \"Default realm\"),\n            // privilegeManager: privilegeManager,\n            // https: config.ssl\n            //     ? { cert: config.sslCert, key: config.sslKey }\n            //     : undefined,\n            port: config.port,\n            hostname: config.host,\n        };\n        config.ssl &&\n            Reflect.set(options, \"https\", {\n                cert: config.sslCert,\n                key: config.sslKey,\n            });\n        const server = new webdav.WebDAVServer(options);\n\n        server.beforeRequest(beforelogger());\n        if (!config.disableAuthentication) {\n            const auth_middle = this.#auth_middle;\n            if (\n                Array.isArray(this.config.methodsWithoutAuthentication) &&\n                this.config.methodsWithoutAuthentication.length\n            ) {\n                server.beforeRequest((ctx, next): void => {\n                    if (\n                        ctx.request.method &&\n                        this.config.methodsWithoutAuthentication?.includes(\n                            ctx.request.method,\n                        )\n                    ) {\n                        next();\n                    } else {\n                        auth_middle(ctx, next);\n                    }\n                });\n            } else {\n                server.beforeRequest(auth_middle);\n            }\n        } else {\n            server.beforeRequest((ctx, next) => {\n                const readonly_methods = [\"GET\", \"HEAD\", \"PROPFIND\", \"OPTIONS\"];\n                if (\n                    ctx.request.method &&\n                    readonly_methods.includes(ctx.request.method)\n                ) {\n                    next();\n                } else {\n                    ctx.setCode(405);\n                    ctx.exit();\n                }\n            });\n        }\n        server.beforeRequest(propfindchecker());\n        server.beforeRequest(koa_static_server(config.path));\n        server.afterRequest(afterlogger());\n\n        return server;\n    }\n    #get_authentication(config: WebdavCliConfig) {\n        return config.digest\n            ? \"HTTPDigestAuthentication\"\n            : \"HTTPBasicAuthentication\";\n    }\n\n    async start() {\n        const config = this.config;\n        const { server } = this;\n        console.log(\n            Object.fromEntries(\n                Object.entries(config).filter(([key]) => {\n                    return ![\"sslKey\", \"sslCert\"].includes(key);\n                }),\n            ),\n        );\n        await server.setFileSystemAsync(\n            \"/\",\n            new webdav.PhysicalFileSystem(config.path),\n        );\n        const logs = [\n            `Server running at ${config.url}`,\n\n            \"Hit CTRL-C to stop the server\",\n            \"Run with --help to print help\",\n        ];\n\n        console.log(logs.join(\"\\n\"));\n        let rawhttpserver: http.Server | https.Server | undefined = undefined;\n\n        Object.defineProperty(server, \"server\", {\n            get() {\n                return rawhttpserver;\n            },\n            set(v) {\n                rawhttpserver = v;\n                if (!rawhttpserver) {\n                    return;\n                }\n                rawhttpserver.on(\"error\", (err) => {\n                    if (Reflect.get(err, \"code\") === \"EADDRINUSE\") {\n                        console.error(err);\n                        rawhttpserver?.listen(\n                            Math.round(Math.random() * 65535),\n                            config.host,\n                        );\n                        return;\n                    } else {\n                        throw err;\n                    }\n                });\n                rawhttpserver.on(\"listening\", () => {\n                    console.log(\n                        `Server listening on ` +\n                            JSON.stringify(rawhttpserver?.address()),\n                    );\n                });\n\n                return;\n            },\n            enumerable: true,\n            configurable: true,\n        });\n\n        await server.startAsync(config.port);\n    }\n}\nexport type HTTPRequestContext = webdav.HTTPRequestContext;\n","import { HTTPRequestContext } from \"./index\";\nimport { createhttpauth } from \"./create-http-auth.js\";\n\nexport function createhttpauthmiddle(\n    username: string,\n    password: string,\n    authentication: \"HTTPDigestAuthentication\" | \"HTTPBasicAuthentication\",\n): (ctx: HTTPRequestContext, next: () => void) => void {\n    return createhttpauth({\n        user: username,\n        pass: password,\n        authentication,\n    });\n}\n","import { HTTPRequestContext } from \"./webdav-cli.server.js\";\n\nexport function beforelogger() {\n    return async (ctx: HTTPRequestContext, next: () => void) => {\n        const { url, headers, method } = ctx.request;\n        console.log(\">> \", method, url, headers);\n        next();\n    };\n}\n","import { HTTPRequestContext } from \"./webdav-cli.server.js\";\n\nexport function propfindchecker() {\n    return (arg: HTTPRequestContext, next: () => void) => {\n        const { headers, method } = arg.request;\n        const { depth } = headers;\n        if (method === \"PROPFIND\" && depth !== \"0\" && depth !== \"1\") {\n            arg.setCode(403);\n            arg.exit();\n        } else {\n            next();\n        }\n    };\n}\n","//@ts-ignore\nimport Koa from \"koa\";\nimport logger from \"koa-logger\";\nimport { v2 as webdav } from \"webdav-server\";\n//@ts-ignore\nimport { loadcoremiddles } from \"@masx200/serve-cli\";\nexport function koa_static_server(publicpath: string) {\n    const app = new Koa();\n    // app.use(async (ctx, next) => {\n    //     ctx.response.set(\"Access-Control-Allow-Origin\", \"*\");\n    //     return next();\n    // });\n\n    // app.use(async (ctx, next) => {\n    //     await next();\n    //     if (ctx.method === \"HEAD\") {\n    //         ctx.res.end();\n    //     }\n    //     return;\n    // });\n    // app.use(range);\n    // app.use(cors({}));\n    app.use(logger());\n    // app.use(conditional());\n\n    // app.use(compress({}));\n    // app.use(streametag({}));\n    // app.use(koaetag({}));\n    // app.use(serveIndex(publicpath, { hidden: true }));\n    // app.use(servestatic(publicpath, { hidden: true }));\n    loadcoremiddles(app, publicpath, false);\n    const serverHandler = app.callback();\n    return function middleware(\n        ctx: webdav.HTTPRequestContext,\n        next: () => void,\n    ) {\n        const { request, response } = ctx;\n        const [req, res] = [request, response];\n        if (\n            ctx.request.method &&\n            ![\"GET\", \"HEAD\"].includes(ctx.request.method)\n        ) {\n            return next();\n        }\n        serverHandler(req, res);\n\n        return;\n    };\n}\n","import { HTTPRequestContext } from \"./webdav-cli.server.js\";\n\nexport function afterlogger() {\n    return (arg: HTTPRequestContext, next: () => void) => {\n        const log = `>> ${arg.request.method} ${arg.requested.uri} > ${arg.response.statusCode} `;\n        // server.emit('log', null, null, '/', log);\n        console.log(log);\n        next();\n    };\n}\n","import process from \"process\";\nimport minimist from \"minimist\";\nimport { WebdavCli } from \"./webdav-cli.server.js\";\nimport { showhelp } from \"./showhelp.js\";\n\nexport async function main(argv: Partial<minimist.ParsedArgs>) {\n    console.log(\"webdav-cli\", \"\\n\");\n    if (argv.help || argv.h) {\n        showhelp();\n    }\n    // if (argv.version || argv.v) {\n    //     console.log(\"Version: \" + require(\"../package.json\").version, \"\\n\");\n    //     process.exit();\n    // }\n    const rights = argv.rights || argv.r;\n    const argvRights =\n        rights && typeof rights === \"string\" ? rights.split(\",\") : undefined;\n    const envRights = process.env.WEBDAV_CLI_RIGHTS\n        ? process.env.WEBDAV_CLI_RIGHTS.split(\",\")\n        : undefined;\n    const config = {\n        path: argv.path || process.env.WEBDAV_CLI_PATH || argv.pa,\n        host: argv.host || process.env.WEBDAV_CLI_HOST || argv.ho,\n        port:\n            Number(argv.port || argv.po) ||\n            parseInt(String(process.env.WEBDAV_CLI_PORT)),\n        digest:\n            argv.digest || argv.dg || Boolean(process.env.WEBDAV_CLI_DIGEST),\n        username: argv.username || process.env.WEBDAV_CLI_USERNAME || argv.u,\n        password: argv.password || process.env.WEBDAV_CLI_PASSWORD || argv.ps,\n        ssl: argv.ssl || argv.s || Boolean(process.env.WEBDAV_CLI_SSL),\n        sslKey: argv.sslKey || process.env.WEBDAV_CLI_SSL_KEY,\n        sslCert: argv.sslCert || process.env.WEBDAV_CLI_SSL_CERT,\n        disableAuthentication:\n            argv.disableAuthentication ||\n            process.env.WEBDAV_CLI_DISABLE_AUTHENTICATION ||\n            argv.da,\n        rights: argvRights || envRights,\n        methodsWithoutAuthentication: argv.methodsWithoutAuthentication\n            ? String(argv.methodsWithoutAuthentication).split(\",\")\n            : undefined,\n    };\n    process.on(\"unhandledRejection\", (e) => {\n        console.error(e);\n        throw e;\n    });\n    const run = async () => {\n        //@ts-ignore\n        const webdavCli = new WebdavCli(config);\n        await webdavCli.start();\n        return webdavCli;\n    };\n    return await run();\n}\n","import process from \"process\";\nexport function showhelp() {\n    console.log(\n        [\n            \"usage: webdav-cli [options]\",\n            \"\",\n            \"options:\",\n            \"  --path,-pa        Path to folder [process.cwd()]\",\n            \"  --host,-ho         Host to use [0.0.0.0]\",\n            \"  --port,-po       Port to use [1900]\",\n            \"  --digest,-dg     Enable digest authentication [basic]\",\n            \"  --username,-u   Username for basic/digest authentication [random]\",\n            \"  --password,-ps   Password for basic/digest authentication [random]\",\n            \"  --disableAuthentication,-da  The server file becomes read-only without Authentication.[false]\",\n            \"  --ssl,-s        Enable https [false]\",\n            \"  --methodsWithoutAuthentication          methods Without Authentication[undefined]\",\n            \"  --sslKey     Path to ssl key file [self-signed]\",\n            \"  --sslCert    Path to ssl cert file [self-signed]\",\n            \"  --help,-h       Print this list and exit\",\n            // \"  --version,-v     Print the version and exit.\",\n            \"  --rights,-r     Comma separated values without spaces [all]\",\n            `\n    'all', 'canCreate', 'canDelete', 'canMove', 'canRename', \n    'canAppend', 'canWrite', 'canRead', 'canSource', \n    'canGetMimeType', 'canGetSize', 'canListLocks', \n    'canSetLock', 'canRemoveLock', 'canGetAvailableLocks', \n    'canGetLock', 'canAddChild', 'canRemoveChild', \n    'canGetChildren', 'canSetProperty', 'canGetProperty', \n    'canGetProperties', 'canRemoveProperty', 'canGetCreationDate', \n    'canGetLastModifiedDate', 'canGetWebName', 'canGetType'`,\n            \"\",\n            \"env:\",\n            \"  WEBDAV_CLI_PATH, WEBDAV_CLI_HOST, WEBDAV_CLI_PORT,\",\n            \"  WEBDAV_CLI_USERNAME, WEBDAV_CLI_PASSWORD, WEBDAV_CLI_DIGEST,\",\n            \"  WEBDAV_CLI_SSL, WEBDAV_CLI_SSL_KEY, WEBDAV_CLI_SSL_CERT,\",\n            \"  WEBDAV_CLI_AUTO_INDEX, WEBDAV_CLI_RIGHTS\",\n            \"  WEBDAV_CLI_DISABLE_AUTHENTICATION\",\n            \"\",\n        ].join(\"\\n\"),\n    );\n    process.exit();\n}\n","// #!/usr/bin/env node\nimport process from \"process\";\nimport minimist from \"minimist\";\nimport { main } from \"./main\";\nconst argv = minimist(process.argv.slice(2));\nmain(argv).catch(console.error);\n"],"names":["createhttpauth","options","realm","auth","authentication","user","pass","httpauth","basic","username","password","callback","createbasicauth","digest","utils","md5","createdigestauth","ctx","next","check","req","res","request","response","RIGHTS","getRandomString","length","Array","Math","ceil","map","random","toString","slice","join","__dirname","dirname","fileURLToPath","import","meta","url","WebdavCli","config","server","auth_middle","constructor","this","getConfig","get_authentication","createhttpauthmiddle","init","selfSignedKey","selfSignedCert","path","process","cwd","host","port","Boolean","ssl","sslKey","fs","readFileSync","sslCert","disableAuthentication","rights","filter","item","includes","userManager","webdav","SimpleUserManager","addUser","privilegeManager","SimplePathPrivilegeManager","setRights","requireAuthentification","httpAuthentication","askForAuthentication","getUser","gotUserCallback","getDefaultUser","defaultUser","hostname","Reflect","set","cert","key","WebDAVServer","beforeRequest","async","headers","method","console","log","setCode","exit","isArray","methodsWithoutAuthentication","arg","depth","publicpath","app","Koa","use","logger","loadcoremiddles","serverHandler","koa_static_server","afterRequest","requested","uri","statusCode","Object","fromEntries","entries","setFileSystemAsync","PhysicalFileSystem","logs","rawhttpserver","defineProperty","get","v","on","err","error","listen","round","JSON","stringify","address","enumerable","configurable","startAsync","argv","help","h","r","argvRights","split","undefined","envRights","env","WEBDAV_CLI_RIGHTS","WEBDAV_CLI_PATH","pa","WEBDAV_CLI_HOST","ho","Number","po","parseInt","String","WEBDAV_CLI_PORT","dg","WEBDAV_CLI_DIGEST","WEBDAV_CLI_USERNAME","u","WEBDAV_CLI_PASSWORD","ps","s","WEBDAV_CLI_SSL","WEBDAV_CLI_SSL_KEY","WEBDAV_CLI_SSL_CERT","WEBDAV_CLI_DISABLE_AUTHENTICATION","da","e","webdavCli","start","run","main","minimist","catch"],"mappings":"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"}